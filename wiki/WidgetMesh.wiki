#summary WidgetMesh - Mesh Network Protocol for Widgets
----
<wiki:toc max_depth="3" />
----
=Widget Mesh=
==Goal==
The goal of this sub project is to provide simple mesh networking for the widgets.  Something along the lines of a cutdown [http://en.wikipedia.org/wiki/Zigbee Zigbee]/SP100a/[http://www.atmel.com/dyn/products/tools_card.asp?tool_id=4578&family_id=676 RUM] stack.

Some of the features I'd ultimately like to implement:
 * Frequency hopping to give diversity to interference.
 * TDMA type access to media. Allow contention free access to RF for all nodes in the network.
 * Basic Meshing, extending the range of sensor, routing of packets over alternate routes if nodes fail etc
 * Remote firmware updates.

== Network Overview ==
the network consists of the following:
 #) Gateway Device - At least one gateway device is required to form the network, the role of this is to co-ordinate the forming of the network and and the routing of packets to and from the WidgetMesh network, i.e. sends data through to a connected device for data-management e.g. a connected PC or a network.
 #) Network Nodes - The rest of the network consists of widgets, these may be low powered battery or connected to mains.  The nodes when configured will search for and join the network under the coordination of the gateway device.

=== Frequency Hopping===
To provide resistance to RF interference, the mesh should provide the ability for the nodes to communicate over a number of different frequencies.  These frequencies are switched on a regular basis in a set pattern, so all nodes on the network know what channel to communicate on.

=== TDMA Slotted Access ===
[http://en.wikipedia.org/wiki/Time_division_multiple_access Time Division Multiple Access (TDMA)] provides a shared slotted access to the RF media.  

This consists of a repeating superframe made up of individual time slots of set length. Each timeslot slots can be assigned for a different purposes, i.e. node A and B to communicate with each other, or a broadcast slot for join advertisements. During a timeslot that is not assigned to an individual node then the node can have the Rx circuit turned off to save power.  

To use a slotted access scheme, a notion of network time needs to be available across the network, this should be synchronised either from the Gateway or Coordinator node or a time source.

TODO: Picture of Superframe 

=== Self Forming and Self Healing ===

If the minimum network requirement are met then the network should be self forming.  A node when first powered up will listen for other node communications in its vicinity and allowing it to sent join requests to form network links ([WidgetMeshAssociation]).  The network will form from the gateway out.

The network should be self healing, if a node fails or for some reasons is disconnected from the network, then the rest of the network should be able to re-form as best as possible.

http://strobit.googlecode.com/svn/wiki/images/widgetmesh/mesh_overview.png

----

==stack Overview==
http://strobit.googlecode.com/svn/wiki/images/widgetmesh/stacksml.png

----

==Design==

===Physical Layer===
The Physical Layer is provided by the RFM12 Driver.

The driver will provide functions to:
 * Change frequency
 * Change Tx Power
 * Report RSSI (Optional)
 * Put RF into Low Power/Sleep Mode
 * Tx Data
 * Rx Data

===MAC Layer ===
The purpose of the MAC layer is to add the required preamble and SYNC bytes to the data packets being transmitted.

Pre-amble Bytes:  Required by the RFM12B transceiver for FSK lock, always 0xAA.  

Sync Bytes:  The sync bytes are required by the RFM12B transceiver, the first is fixed and cannot be changed, the second byte is used to represent network ID.

http://strobit.googlecode.com/svn/wiki/images/widgetmesh/mpdu.png

|| 0xAA || 0xAA || 0x2D || 0xD4 || DPDU (2 - n bytes) || 0xAA||

0xD4 is the network ID

TODO: May want to handle error detection at this level so extra work is not performed by the upper layers if a corrupt packet, i.e. drop the packet here if corrupt.  To handle CRC then an extra 3 bytes are required. DPDU payload byte count and CRC16 bytes.

TODO: May also want to implement Forward Error correction using Manchester Encoding in this layer.  Will halve data rate if implemented.

TODO: Encryption.  Implement payload encryption using [http://www.efton.sk/crypt/index.htm XTEA], RC4?, AES?, Skipjack?  resources required?  Data throughput?

===Data Link Layer===

The majority of network functions are handled by this layer.
   * [WidgetMeshAssociation Network Discovery and Association]
   * [WidgetMeshRouting Network Routing]

----

==Implementation==
WidgetMesh is implemented on the [http://www.sics.se/contiki/ ContikiOS] and is available via the [http://code.google.com/p/strobit/source/browse/#svn/trunk/widgetmesh project SVN].

Current Status: 
  * ContikiOS ported to RFM12Widget Platform
  * Hello-world example successfully running.
  * no networking.